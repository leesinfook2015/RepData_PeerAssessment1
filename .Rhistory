training =(Year <  2005)
training_data=Smarket[training,]
testing = !training
testing_data=Smarket[testing,]
Direction_testing = Direction[testing,]
Direction_testing = Direction[testing]
stock_model=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume, data=training_data, family=binomial)
summary(stock_model)
model_pred_prob=pred(stock_model,testing_data, type="respone")
model_pred_prob=predict(stock_model,testing_data, type="respone")
model_pred_prob=predict(stock_model,testing_data, type="response")
model_pred_Direction=rep("Down",252)
model_pred_Direction[model_pred_prob>0.5]="Up"
table(model_pred_Direction,Direction_testing)
mean(model_pred_Direction != Direction_testing)
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
sessionInfo()
hist(rnorm(100))
set.seed(123)
hist(rnorm(100))
hist(rexp(4))
setwd("~/GitHub/RepData_PeerAssessment1")
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/5.Reproducible Research/peer_ass1")
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
library(dplyr)
tapply(activity_data$date,activity_data$steps,sum)
tapply(activity_data$date,activity_data$steps,sum)
by_date<- group_by(activity_data, date)
by_date
total_number<- summarise(by_date,total_step = sum(steps,na.rm = TRUE))
total_number
plot(total_number)
print(total_number)
names(total_number)
library(ggplot)
library(ggplot2)
ggplot(total_number,aes(x=date))+geom_histogram(binwidth=2,fill="red")
hist(total_number$total_step, main="Hist Total Steps per Day", xlab="# Steps", col="bisque3") # plot a histogram
ggplot(total_number,aes(x=total_step))+geom_histogram(binwidth=2,fill="red")
hist(total_number$total_step, main="Hist Total Steps per Day", xlab="# Steps", col="bisque3") # plot a histogram
summary(total_number)
summary(total_number$total_step, daily_avg=mean(total_step))
summarise(total_number$total_step, daily_avg=mean(total_step))
summarise(total_number,
test1 = mean(total_step, na.rm = TRUE))
avg_total_step_daily=summarise(total_number,avergae_daily_total_step = mean(total_step, na.rm = TRUE))
avg_total_step_daily
med_total_step_daily=summarise(total_number,avergae_daily_total_step = median(total_step, na.rm = TRUE))
med_total_step_daily
total_number<- summarise(by_date,total_step = sum(steps,na.rm = TRUE))
total_number
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
by_date1<- group_by(data1, date)
total_numbe1r<- summarise(by_date1,total_step1 = sum(steps,na.rm = TRUE))
total_numbe1r
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/5.Reproducible Research/peer_ass1")
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
# remove NA in data
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
#Calculate the total number of steps taken per day
library(dplyr)
by_date<- group_by(data1, date)
total_number<- summarise(by_date,total_step = sum(steps))
total_number
hist(total_number$total_step, main="Hist Total Steps per Day", xlab="# Steps", col="bisque3") # plot a histogram
hist(total_number$total_step, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
summary(total_number)
summary(total_number$total_step)
names(summary(total_number$total_step))
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
steps_by_interval
head(data1)
str(data1)
table(data1$interval)
steps_by_interval
max(c(1,2,3))
###finding the maximum interval,
steps_by_interval[max(steps_by_interval$steps)]
steps_by_interval[max(steps_by_interval$steps),]
max_steps_row <- which.max(steps_by_interval$steps)
# find interval with this max
steps_by_interval[max_steps_row, ]
max(steps_by_interval$steps)
steps_by_interval[which.max(steps_by_interval$steps),]
head(activity_data)
is.na(activity_data$steps)
table(is.na(activity_data$steps))
summary(steps_by_interval)
head(activity_data)
summary(data1$steps)
summary(data1$steps)
data1$steps
hist(data1$steps)
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
steps_by_interval
dim(activity_data)
dim(activity_data)[1]
#getting the summary statistics of interval results.
summary(steps_by_interval)
steps_by_interval[which(5),]
steps_by_interval[which(steps_by_interval$interval=a),]
steps_by_interval[which(steps_by_interval$interval=a)]
steps_by_interval[which.max(steps_by_interval$steps),]
steps_by_interval$steps[which(steps_by_interval$interval=a)]
steps_by_interval$steps[which(steps_by_interval$interval==a)]
a=5
steps_by_interval$steps[which(steps_by_interval$interval==a)]
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
newstep[i]=steps_by_intervalsteps_by_interval$steps[which(steps_by_interval$interval==interval_value),]
}else  newstep[i]= activity_data$steps[i]
}
#imputing all those NA step row in the orignal data with the mean steps from each 5 mins intevral timing.
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
newstep[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value),]
}else  newstep[i]= activity_data$steps[i]
}
activity_data$interval[1]
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/5.Reproducible Research/peer_ass1")
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
dim(activity_data)[1]
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
# remove NA in data
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
head(data1)
str(data1)
table(data1$interval)
#Calculate the total number of steps taken per day
library(dplyr)
by_date<- group_by(data1, date)
total_number<- summarise(by_date,total_step = sum(steps))
## histogram of of total step by date
hist(total_number$total_step, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
##Calculate and report the mean and median of the total number of steps taken per day
names(summary(total_number$total_step))
# preprocessing data for plot
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
# create a time series plot
plot(steps_by_interval$interval, steps_by_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps")
###finding the maximum interval
#which.max indicate for us the position.
steps_by_interval[which.max(steps_by_interval$steps),]
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
table(is.na(activity_data$steps))
a=5
steps_by_interval$steps[which(steps_by_interval$interval==a)]
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/5.Reproducible Research/peer_ass1")
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
dim(activity_data)[1]
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
# remove NA in data
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
head(data1)
str(data1)
table(data1$interval)
#Calculate the total number of steps taken per day
library(dplyr)
by_date<- group_by(data1, date)
total_number<- summarise(by_date,total_step = sum(steps))
## histogram of of total step by date
hist(total_number$total_step, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
##Calculate and report the mean and median of the total number of steps taken per day
names(summary(total_number$total_step))
# preprocessing data for plot
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
# create a time series plot
plot(steps_by_interval$interval, steps_by_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps")
###finding the maximum interval
#which.max indicate for us the position.
steps_by_interval[which.max(steps_by_interval$steps),]
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
table(is.na(activity_data$steps))
a=5
steps_by_interval$steps[which(steps_by_interval$interval==a)]
activity_data
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
newstep[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value),]
}else  newstep[i]= activity_data$steps[i]
}
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
newstep[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value)]
}else  newstep[i]= activity_data$steps[i]
}
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value)]
}else  activity_data$new_step[i]]= activity_data$steps[i]
}
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value)]
}else  activity_data$new_step[i]] = activity_data$steps[i]
}
steps_by_interval$steps[which(steps_by_interval$interval==5),]
steps_by_interval
steps_by_interval$steps[which(steps_by_interval$interval==5),]
steps_by_interval$interval==5
which(steps_by_interval$interval==5)
steps_by_interval$steps[which(steps_by_interval$interval==5)]
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value)]
}else  activity_data$new_step[i]] = activity_data$steps[i]
}
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[which(steps_by_interval$interval==interval_value)]
}else  activity_data$new_step[i]] = activity_data$steps[i]
}
steps_by_interval$steps[which(steps_by_interval$interval==5)]
interval_value=activity_data$interval[1]
interval_value
interval_value=activity_data$interval[2]
interval_value
steps_by_interval$interval==5
steps_by_interval$steps[(steps_by_interval$interval==5)]
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[steps_by_interval$interval==interval_value]
}else  activity_data$new_step[i]] = activity_data$steps[i]
}
for (i in 1 :dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_value=activity_data$interval[i]
activity_data$new_step[i]=steps_by_interval$steps[steps_by_interval$interval==interval_value,]
}else  activity_data$new_step[i]] = activity_data$steps[i]
}
steps_by_interval
steps_by_interval$steps[1]
steps_by_interval$steps[steps_by_interval$interval==0]
}
steps_by_interval$steps[steps_by_interval$interval==1]
steps_by_interval$steps[steps_by_interval$interval==5]
for (i in 1: dim(activity_data)[1]){
if(is.na(activity_data$steps[i])){
interval_vaue=activity_data$interval[i]
activity_data$newsteps[i]=steps_by_interval$steps[steps_by_interval$interval==interval_vaue]
} else activity_data$newsteps[i]=activity_data$steps[i]
}
activity_data
head(activity_data)
activity_data[is.na(activity_data$steps),]
head(activity_data[is.na(activity_data$steps),])
setwd("C:/Users/User/Desktop/school/IDA_MOOC/coursera2015/5.Reproducible Research/peer_ass1")
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
dim(activity_data)[1]
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
# remove NA in data
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
head(data1)
str(data1)
table(data1$interval)
#Calculate the total number of steps taken per day
library(dplyr)
by_date<- group_by(data1, date)
total_number<- summarise(by_date,total_step = sum(steps))
## histogram of of total step by date
hist(total_number$total_step, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
##Calculate and report the mean and median of the total number of steps taken per day
names(summary(total_number$total_step))
# preprocessing data for plot
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
# create a time series plot
plot(steps_by_interval$interval, steps_by_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps")
###finding the maximum interval
#which.max indicate for us the position.
steps_by_interval[which.max(steps_by_interval$steps),]
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
table(is.na(activity_data$steps))
new_data=activity_data
new_data=activity_data
for (i in 1: dim(new_data)[1]){
if(is.na(new_data$steps[i])){
interval_vaue=new_data$interval[i]
new_data$newsteps[i]=steps_by_interval$steps[steps_by_interval$interval==interval_vaue]
} else new_data$newsteps[i]=new_data$steps[i]
}
#checking the impute data
head(new_data[is.na(new_data$steps),])
by_date_new<- group_by(new_data, date)
total_numbe_newr<- summarise(by_date_new,total_step_new = sum(newsteps))
## histogram of of total step by date
hist(total_numbe_newr$total_step_new, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
names(summary(total_numbe_newr$total_step_new))
summary(total_number$total_step)
summary(total_numbe_newr$total_step_new)
summary(total_numbe_newr$total_step_new)[3]
mean1_vs_mean2=c(summary(total_number$total_step)[4],summary(total_numbe_newr$total_step_new)[4])
mean1_vs_mean2=c(summary(total_number$total_step)[4],summary(total_numbe_newr$total_step_new)[4])
mean1_vs_mean2
mean1_vs_mean2=c(summary(total_number$total_step)[4],summary(total_numbe_newr$total_step_new)[4])
median1_vs_median2=c(summary(total_number$total_step)[3],summary(total_numbe_newr$total_step_new)[3])
mean1_vs_mean2
median1_vs_median2
weekday(new_data$date)
weekdays(new_data$date)
new_data&new_weekday=weekdays(new_data$date)
new_data$new_weekday=weekdays(new_data$date)
head(new_data)
new_data$new_type=ifelse(((new_data$new_weekday=="Sunday")|(new_data$new_weekday=="Saturday")),"Weekends","weekdays")
head(new_data)
steps_by_interval_1<- aggregate(steps ~ interval, new_data, mean)
steps_by_interval_1
head(new_Rdata)
head(new_data)
steps_by_interval_1=aggregate(newsteps~interval,new_type,new_data,mean)
steps_by_interval_1
steps_by_interval_1=aggregate(newsteps~c(interval,new_type),new_data,mean)
steps_by_interval_1=aggregate(newsteps~(interval,new_type),new_data,mean)
steps_by_interval_1=aggregate(newsteps~interval+new_type,new_data,mean)
steps_by_interval_1
# creat a plot
qplot(interval,
newsteps,
data = steps_by_interval_1,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ new_type, ncol = 2)
library(qqplot2)
library(qqplot)
library(ggplot2)
qplot(interval,
newsteps,
data = steps_by_interval_1,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ new_type, ncol = 2)
facet_wrap(~ new_type, ncol = 1)
qplot(interval,
newsteps,
data = steps_by_interval_1,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ new_type, ncol = 1)
#defining the url
url="https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip"
temp <- tempfile()
download.file("https://d396qusza40orc.cloudfront.net/repdata%2Fdata%2Factivity.zip",temp)
# Uncompress data file
if (file.exists(temp) == FALSE) {
unzip(temp)
}
setwd("~/GitHub/RepData_PeerAssessment1")
new_data$new_weekday=weekdays(new_data$date)
library(base)
setwd("~/GitHub/RepData_PeerAssessment1")
facet_wrap(~ new_type, ncol = 1)
activity_data=read.csv("activity.csv", header = T)
head(activity_data)
str(activity_data)
dim(activity_data)[1]
activity_data$date=as.Date(activity_data$date, "%Y-%m-%d")
# remove NA in data
data1 <- activity_data[ with (activity_data, { !(is.na(steps)) } ), ]
head(data1)
str(data1)
table(data1$interval)
#Calculate the total number of steps taken per day
library(dplyr)
by_date<- group_by(data1, date)
total_number<- summarise(by_date,total_step = sum(steps))
## histogram of of total step by date
hist(total_number$total_step, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
##Calculate and report the mean and median of the total number of steps taken per day
summary(total_number$total_step)
# preprocessing data for plot
steps_by_interval <- aggregate(steps ~ interval, data1, mean)
# create a time series plot
plot(steps_by_interval$interval, steps_by_interval$steps, type='l',
main="Average number of steps over all days", xlab="Interval",
ylab="Average number of steps")
###finding the maximum interval
#which.max indicate for us the position.
steps_by_interval[which.max(steps_by_interval$steps),]
#Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
table(is.na(activity_data$steps))
#imputing all those NA step row in the orignal data with the mean steps from each 5 mins intevral timing.
new_data=activity_data
for (i in 1: dim(new_data)[1]){
if(is.na(new_data$steps[i])){
interval_vaue=new_data$interval[i]
new_data$newsteps[i]=steps_by_interval$steps[steps_by_interval$interval==interval_vaue]
} else new_data$newsteps[i]=new_data$steps[i]
}
#checking the impute data
head(new_data[is.na(new_data$steps),])
#histogram for the new_data
by_date_new<- group_by(new_data, date)
total_numbe_newr<- summarise(by_date_new,total_step_new = sum(newsteps))
## histogram of of total step by date
hist(total_numbe_newr$total_step_new, main="Histogram Total Steps per Day", xlab="# Steps", col="red") # plot a histogram
##Calculate and report the new_mean and new_ median of the total number of steps taken per day
summary(total_numbe_newr$total_step_new)[3]
#comparing the 2 mean and median
mean1_vs_mean2=c(summary(total_number$total_step)[4],summary(total_numbe_newr$total_step_new)[4])
median1_vs_median2=c(summary(total_number$total_step)[3],summary(total_numbe_newr$total_step_new)[3])
#creating a new factor for the new dataset.
new_data$new_weekday=weekdays(new_data$date)
head(new_data)
#as weekdays function only allow monday to sunday, we need to categeroise them into 2
new_data$new_type=ifelse(((new_data$new_weekday=="Sunday")|(new_data$new_weekday=="Saturday")),"Weekends","weekdays")
head(new_data)
steps_by_interval_1=aggregate(newsteps~interval+new_type,new_data,mean)
library(ggplot2)
# creat a plot
qplot(interval,
newsteps,
data = steps_by_interval_1,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ new_type, ncol = 1)
setwd("~/GitHub/RepData_PeerAssessment1")
write.table(new_data, ""~/GitHub/RepData_PeerAssessment1/mydata.txt", sep="\t")
write.table(new_data, "~/GitHub/RepData_PeerAssessment1/mydata.txt", sep="\t")
new_data1=read.table("mydata.txt", , sep="\t")
steps_by_interval_1=aggregate(newsteps~interval+new_type,new_data1,mean)
library(ggplot2)
# creat a plot
qplot(interval,
newsteps,
data = steps_by_interval_1,
type = 'l',
geom=c("line"),
xlab = "Interval",
ylab = "Number of steps",
main = "") +
facet_wrap(~ new_type, ncol = 1)
